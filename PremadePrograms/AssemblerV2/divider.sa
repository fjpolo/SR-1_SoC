VAR2 dividend 0
VAR2 divisor 0
VAR2 quotient 0
VAR2 remainder 0
VAR2 multiplicand 0
VAR2 multiplicandRST 0x8000

//Input
SHM (progLoop)
LDA MM_BUTTON
ANDI 64
SFM
JPZ *progLoop
CPY2 dividend MM_WIDE
CPY divisor MM_THIN

//Divider
CPY2 multiplicand multiplicandRST
CPY2 quotient CONST_ZERO
LDA divisor (start)
MUL multiplicand
JPC *shiftMult //If carries, result will go negative
ATB
LDA dividend
SUB MM_B
JPC *shiftMult //If carries, result went negative
RDA dividend
LDA multiplicand
OR quotient
RDA quotient
LDA multiplicand (shiftMult)
RSHFT
RDA multiplicand
JPZ *exit
JMP *start
CPY2 remainder dividend (exit) 

//Output
LDA quotient
CPY MM_LEDS MM_A_L
JMP *progLoop